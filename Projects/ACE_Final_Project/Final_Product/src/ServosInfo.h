#include <Servo.h>

#define TIME_STEP 5
#define TIME_MAX ((2500 - 500)/TIME_STEP) + 2
int step = 5;

// Init angles
#define SERVO1_INIT 30
#define SERVO2_INIT 90
#define SERVO3_INIT 50
#define SERVO4_INIT 140

struct Servo1
{  
  Servo servo;
  int curr_Angle = SERVO1_INIT;
  int next_Angle = SERVO1_INIT;
  int time[TIME_MAX] =  {
    500, 505, 510, 515, 520, 525, 530, 535, 540, 545,
    550, 555, 560, 565, 570, 575, 580, 585, 590, 595,
    600, 605, 610, 615, 620, 625, 630, 635, 640, 645,
    650, 655, 660, 665, 670, 675, 680, 685, 690, 695,
    700, 705, 710, 715, 720, 725, 730, 735, 740, 745,
    750, 755, 760, 765, 770, 775, 780, 785, 790, 795,
    800, 805, 810, 815, 820, 825, 830, 835, 840, 845,
    850, 855, 860, 865, 870, 875, 880, 885, 890, 895,
    900, 905, 910, 915, 920, 925, 930, 935, 940, 945,
    950, 955, 960, 965, 970, 975, 980, 985, 990, 995,
    1000, 1005, 1010, 1015, 1020, 1025, 1030, 1035, 1040, 1045,
    1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1090, 1095,
    1100, 1105, 1110, 1115, 1120, 1125, 1130, 1135, 1140, 1145,
    1150, 1155, 1160, 1165, 1170, 1175, 1180, 1185, 1190, 1195,
    1200, 1205, 1210, 1215, 1220, 1225, 1230, 1235, 1240, 1245,
    1250, 1255, 1260, 1265, 1270, 1275, 1280, 1285, 1290, 1295,
    1300, 1305, 1310, 1315, 1320, 1325, 1330, 1335, 1340, 1345,
    1350, 1355, 1360, 1365, 1370, 1375, 1380, 1385, 1390, 1395,
    1400, 1405, 1410, 1415, 1420, 1425, 1430, 1435, 1440, 1445,
    1450, 1455, 1460, 1465, 1470, 1475, 1480, 1485, 1490, 1495,
    1500, 1505, 1510, 1515, 1520, 1525, 1530, 1535, 1540, 1545,
    1550, 1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590, 1595,
    1600, 1605, 1610, 1615, 1620, 1625, 1630, 1635, 1640, 1645,
    1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695,
    1700, 1705, 1710, 1715, 1720, 1725, 1730, 1735, 1740, 1745,
    1750, 1755, 1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795,
    1800, 1805, 1810, 1815, 1820, 1825, 1830, 1835, 1840, 1845,
    1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885, 1890, 1895,
    1900, 1905, 1910, 1915, 1920, 1925, 1930, 1935, 1940, 1945,
    1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995,
    2000, 2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045,
    2050, 2055, 2060, 2065, 2070, 2075, 2080, 2085, 2090, 2095,
    2100, 2105, 2110, 2115, 2120, 2125, 2130, 2135, 2140, 2145,
    2150, 2155, 2160, 2165, 2170, 2175, 2180, 2185, 2190, 2195,
    2200, 2205, 2210, 2215, 2220, 2225, 2230, 2235, 2240, 2245,
    2250, 2255, 2260, 2265, 2270, 2275, 2280, 2285, 2290, 2295,
    2300, 2305, 2310, 2315, 2320, 2325, 2330, 2335, 2340, 2345,
    2350, 2355, 2360, 2365, 2370, 2375, 2380, 2385, 2390, 2395,
    2400, 2405, 2410, 2415, 2420, 2425, 2430, 2435, 2440, 2445,
    2450, 2455, 2460, 2465, 2470, 2475, 2480, 2485, 2490, 2495,
    2500, 2505
};

  // Hash function to get angle corresponding PWM
  int getPWM(){

  // Limit angle positions
  if(next_Angle >= 120){
    next_Angle = 120;
  } else if (next_Angle <= 0){
    next_Angle = 0;
  }


  // Smoth transition
  if (next_Angle != curr_Angle)
  { 
    // Decrease speed when getting closer to the desired angle
    if (std::abs(next_Angle - curr_Angle) <= 10){ 
      if(next_Angle < curr_Angle){
        // Angle step movement
        curr_Angle -= 1;  
      } else{
        // Angle step movement
        curr_Angle += 1;  
      }
    }
    else {
      if(next_Angle < curr_Angle){
        // Angle step movement
        curr_Angle -= step;  
      } else{
        // Angle step movement
        curr_Angle += step;  
      }
    }
  
  } else {
    // When desired position is achieved
    next_Angle = curr_Angle;
  }
  
  // Hash function to get angle corresponding PWM
  int hash = map(curr_Angle, 0, 180, 0, TIME_MAX - 1);
  return time[hash];
  }
  

}; 
Servo1 s1;





struct Servo2
{   
  Servo servo;
  int curr_Angle = SERVO2_INIT;
  int next_Angle = SERVO2_INIT;
    int time[TIME_MAX] =  {
    510,514,519,524,529,534,539,544,549,554,
    559,564,569,574,579,584,589,594,599,604,
    609,614,619,624,629,634,639,644,649,654,
    659,664,669,674,679,684,689,694,699,704,
    709,713,718,723,728,733,738,743,748,753,
    758,763,768,773,778,783,788,793,798,803,
    808,813,818,823,828,833,838,843,848,853,
    858,863,868,873,878,883,888,893,898,903,
    908,912,917,922,927,932,937,942,947,952,
    957,962,967,972,977,982,987,992,997,1002,
    1007,1012,1017,1022,1027,1032,1037,1042,1047,1052,
    1057,1062,1067,1072,1077,1082,1087,1092,1097,1102,
    1107,1111,1116,1121,1126,1131,1136,1141,1146,1151,
    1156,1161,1166,1171,1176,1181,1186,1191,1196,1201,
    1206,1211,1216,1221,1226,1231,1236,1241,1246,1251,
    1256,1261,1266,1271,1276,1281,1286,1291,1296,1301,
    1306,1310,1315,1320,1325,1330,1335,1340,1345,1350,
    1355,1360,1365,1370,1375,1380,1385,1390,1395,1400,
    1405,1410,1415,1420,1425,1430,1435,1440,1445,1450,
    1455,1460,1465,1470,1475,1480,1485,1490,1495,1500,
    1505,1509,1514,1519,1524,1529,1534,1539,1544,1549,
    1554,1559,1564,1569,1574,1579,1584,1589,1594,1599,
    1604,1609,1614,1619,1624,1629,1634,1639,1644,1649,
    1654,1659,1664,1669,1674,1679,1684,1689,1694,1699,
    1704,1708,1713,1718,1723,1728,1733,1738,1743,1748,
    1753,1758,1763,1768,1773,1778,1783,1788,1793,1798,
    1803,1808,1813,1818,1823,1828,1833,1838,1843,1848,
    1853,1858,1863,1868,1873,1878,1883,1888,1893,1898,
    1903,1907,1912,1917,1922,1927,1932,1937,1942,1947,
    1952,1957,1962,1967,1972,1977,1982,1987,1992,1997,
    2002,2007,2012,2017,2022,2027,2032,2037,2042,2047,
    2052,2057,2062,2067,2072,2077,2082,2087,2092,2097,
    2102,2106,2111,2116,2121,2126,2131,2136,2141,2146,
    2151,2156,2161,2166,2171,2176,2181,2186,2191,2196,
    2201,2206,2211,2216,2221,2226,2231,2236,2241,2246,
    2251,2256,2261,2266,2271,2276,2281,2286,2291,2296,
    2301,2305,2310,2315,2320,2325,2330,2335,2340,2345,
    2350,2355,2360,2365,2370,2375,2380,2385,2390,2395,
    2400,2405,2410,2415,2420,2425,2430,2435,2440,2445,
    2450,2455,2460,2465,2470,2475,2480,2485,2490,2495,
    2500,2504
};
  
  // Hash function to get angle corresponding PWM
  int getPWM(){

  // Limit angle positions
  if(next_Angle >= 180){
    next_Angle = 180;
  } else if (next_Angle <= 0){
    next_Angle = 0;
  }

  // Smoth transition
  if (next_Angle != curr_Angle)
  { 
    if (std::abs(next_Angle - curr_Angle) <= 10){ 
      if(next_Angle < curr_Angle){
        // Angle step movement
        curr_Angle -= 1;  
      } else{
        // Angle step movement
        curr_Angle += 1;  
      }
    }
    else {
      if(next_Angle < curr_Angle){
        // Angle step movement
        curr_Angle -= step;  
      } else{
        // Angle step movement
        curr_Angle += step;  
      }
    }

  } else {
    // When desired position is achieved
    next_Angle = curr_Angle;
  }
  
  // Hash function to get angle corresponding PWM
  int hash = map(curr_Angle, 0, 180, 0, TIME_MAX - 1);
  return time[hash];
  }
}; 
Servo2 s2;

struct Servo3
{   
  Servo servo;
  int curr_Angle = SERVO3_INIT;
  int next_Angle = SERVO3_INIT;
  int time[TIME_MAX] =  {
    500, 505, 510, 515, 520, 525, 530, 535, 540, 545,
    550, 555, 560, 565, 570, 575, 580, 585, 590, 595,
    600, 605, 610, 615, 620, 625, 630, 635, 640, 645,
    650, 655, 660, 665, 670, 675, 680, 685, 690, 695,
    700, 705, 710, 715, 720, 725, 730, 735, 740, 745,
    750, 755, 760, 765, 770, 775, 780, 785, 790, 795,
    800, 805, 810, 815, 820, 825, 830, 835, 840, 845,
    850, 855, 860, 865, 870, 875, 880, 885, 890, 895,
    900, 905, 910, 915, 920, 925, 930, 935, 940, 945,
    950, 955, 960, 965, 970, 975, 980, 985, 990, 995,
    1000, 1005, 1010, 1015, 1020, 1025, 1030, 1035, 1040, 1045,
    1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1090, 1095,
    1100, 1105, 1110, 1115, 1120, 1125, 1130, 1135, 1140, 1145,
    1150, 1155, 1160, 1165, 1170, 1175, 1180, 1185, 1190, 1195,
    1200, 1205, 1210, 1215, 1220, 1225, 1230, 1235, 1240, 1245,
    1250, 1255, 1260, 1265, 1270, 1275, 1280, 1285, 1290, 1295,
    1300, 1305, 1310, 1315, 1320, 1325, 1330, 1335, 1340, 1345,
    1350, 1355, 1360, 1365, 1370, 1375, 1380, 1385, 1390, 1395,
    1400, 1405, 1410, 1415, 1420, 1425, 1430, 1435, 1440, 1445,
    1450, 1455, 1460, 1465, 1470, 1475, 1480, 1485, 1490, 1495,
    1500, 1505, 1510, 1515, 1520, 1525, 1530, 1535, 1540, 1545,
    1550, 1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590, 1595,
    1600, 1605, 1610, 1615, 1620, 1625, 1630, 1635, 1640, 1645,
    1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695,
    1700, 1705, 1710, 1715, 1720, 1725, 1730, 1735, 1740, 1745,
    1750, 1755, 1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795,
    1800, 1805, 1810, 1815, 1820, 1825, 1830, 1835, 1840, 1845,
    1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885, 1890, 1895,
    1900, 1905, 1910, 1915, 1920, 1925, 1930, 1935, 1940, 1945,
    1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995,
    2000, 2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045,
    2050, 2055, 2060, 2065, 2070, 2075, 2080, 2085, 2090, 2095,
    2100, 2105, 2110, 2115, 2120, 2125, 2130, 2135, 2140, 2145,
    2150, 2155, 2160, 2165, 2170, 2175, 2180, 2185, 2190, 2195,
    2200, 2205, 2210, 2215, 2220, 2225, 2230, 2235, 2240, 2245,
    2250, 2255, 2260, 2265, 2270, 2275, 2280, 2285, 2290, 2295,
    2300, 2305, 2310, 2315, 2320, 2325, 2330, 2335, 2340, 2345,
    2350, 2355, 2360, 2365, 2370, 2375, 2380, 2385, 2390, 2395,
    2400, 2405, 2410, 2415, 2420, 2425, 2430, 2435, 2440, 2445,
    2450, 2455, 2460, 2465, 2470, 2475, 2480, 2485, 2490, 2495,
    2500, 2505
    };

  // Hash function to get angle corresponding PWM
  int getPWM(){

  // Limit angle positions
  if(next_Angle >= 180){
    next_Angle = 180;
  } else if (next_Angle <= 0){
    next_Angle = 0;
  }

  // Smoth transition
  if (next_Angle != curr_Angle)
  { 
    if (std::abs(next_Angle - curr_Angle) <= 10){ 
      if(next_Angle < curr_Angle){
        // Angle step movement
        curr_Angle -= 1;  
      } else{
        // Angle step movement
        curr_Angle += 1;  
      }
    }
    else {
      if(next_Angle < curr_Angle){
        // Angle step movement
        curr_Angle -= step;  
      } else{
        // Angle step movement
        curr_Angle += step;  
      }
    }

  } else {
    // When desired position is achieved
    next_Angle = curr_Angle;
  }
  
  // Hash function to get angle corresponding PWM
  int hash = map(curr_Angle, 0, 180, 0, TIME_MAX - 1);
  return time[hash];
  }

}; 
Servo3 s3;

struct Servo4
{   
  Servo servo;
  int curr_Angle = SERVO4_INIT;
  int next_Angle = SERVO4_INIT;
  int time[TIME_MAX] =  {
    500, 505, 510, 515, 520, 525, 530, 535, 540, 545,
    550, 555, 560, 565, 570, 575, 580, 585, 590, 595,
    600, 605, 610, 615, 620, 625, 630, 635, 640, 645,
    650, 655, 660, 665, 670, 675, 680, 685, 690, 695,
    700, 705, 710, 715, 720, 725, 730, 735, 740, 745,
    750, 755, 760, 765, 770, 775, 780, 785, 790, 795,
    800, 805, 810, 815, 820, 825, 830, 835, 840, 845,
    850, 855, 860, 865, 870, 875, 880, 885, 890, 895,
    900, 905, 910, 915, 920, 925, 930, 935, 940, 945,
    950, 955, 960, 965, 970, 975, 980, 985, 990, 995,
    1000, 1005, 1010, 1015, 1020, 1025, 1030, 1035, 1040, 1045,
    1050, 1055, 1060, 1065, 1070, 1075, 1080, 1085, 1090, 1095,
    1100, 1105, 1110, 1115, 1120, 1125, 1130, 1135, 1140, 1145,
    1150, 1155, 1160, 1165, 1170, 1175, 1180, 1185, 1190, 1195,
    1200, 1205, 1210, 1215, 1220, 1225, 1230, 1235, 1240, 1245,
    1250, 1255, 1260, 1265, 1270, 1275, 1280, 1285, 1290, 1295,
    1300, 1305, 1310, 1315, 1320, 1325, 1330, 1335, 1340, 1345,
    1350, 1355, 1360, 1365, 1370, 1375, 1380, 1385, 1390, 1395,
    1400, 1405, 1410, 1415, 1420, 1425, 1430, 1435, 1440, 1445,
    1450, 1455, 1460, 1465, 1470, 1475, 1480, 1485, 1490, 1495,
    1500, 1505, 1510, 1515, 1520, 1525, 1530, 1535, 1540, 1545,
    1550, 1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590, 1595,
    1600, 1605, 1610, 1615, 1620, 1625, 1630, 1635, 1640, 1645,
    1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695,
    1700, 1705, 1710, 1715, 1720, 1725, 1730, 1735, 1740, 1745,
    1750, 1755, 1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795,
    1800, 1805, 1810, 1815, 1820, 1825, 1830, 1835, 1840, 1845,
    1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885, 1890, 1895,
    1900, 1905, 1910, 1915, 1920, 1925, 1930, 1935, 1940, 1945,
    1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985, 1990, 1995,
    2000, 2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045,
    2050, 2055, 2060, 2065, 2070, 2075, 2080, 2085, 2090, 2095,
    2100, 2105, 2110, 2115, 2120, 2125, 2130, 2135, 2140, 2145,
    2150, 2155, 2160, 2165, 2170, 2175, 2180, 2185, 2190, 2195,
    2200, 2205, 2210, 2215, 2220, 2225, 2230, 2235, 2240, 2245,
    2250, 2255, 2260, 2265, 2270, 2275, 2280, 2285, 2290, 2295,
    2300, 2305, 2310, 2315, 2320, 2325, 2330, 2335, 2340, 2345,
    2350, 2355, 2360, 2365, 2370, 2375, 2380, 2385, 2390, 2395,
    2400, 2405, 2410, 2415, 2420, 2425, 2430, 2435, 2440, 2445,
    2450, 2455, 2460, 2465, 2470, 2475, 2480, 2485, 2490, 2495,
    2500, 2505
    };

  
  // Hash function to get angle corresponding PWM
  int getPWM(){

  // Limit angle positions
  if(next_Angle >= 140){
    next_Angle = 140;
  } else if (next_Angle <= 0){
    next_Angle = 0;
  }

  // Smoth transition
  if (next_Angle != curr_Angle)
  { 
    if (std::abs(next_Angle - curr_Angle) <= 10){ 
      if(next_Angle < curr_Angle){
        // Angle step movement
        curr_Angle -= 1;  
      } else{
        // Angle step movement
        curr_Angle += 1;  
      }
    }
    else {
      if(next_Angle < curr_Angle){
        // Angle step movement
        curr_Angle -= step;  
      } else{
        // Angle step movement
        curr_Angle += step;  
      }
    }

  } else {
    // When desired position is achieved
    next_Angle = curr_Angle;
  }
  
  // Hash function to get angle corresponding PWM
  int hash = map(curr_Angle, 0, 180, 0, TIME_MAX - 1);
    return time[hash];
  
  }

}; 
Servo4 s4;